github-status-params: &github-status-params
  BRANCH_SRC_NAME: ((git-branch))
  GITHUB_CONCOURSE_TOKEN: ((github-concourse-token))
  INSTANCE_VARS: "repo=((pr.repo_name)) target=((pr.dest_branch)) id=PR-((pr.number)) source=((pr.source_branch))"
  PIPELINE_NAME: ((pr-pipeline-name))
  PRODUCT_NAME: ((team-name))
  PR_NUMBER: ((pr.number))
  REPO_NAME: ((pr.repo_name))

groups:
  - name: ((application-name))-deploy
    jobs:
      - ((application-name))-test
      - ((application-name))-update-lambda-code
      - ((application-name))-layers-build-and-deploy

resources:
  - name: src
    type: git
    icon: git
    source:
      {
        uri: ((git-uri)),
        branch: ((git-branch)),
        skip_ssl_verification: true,
        username: ((github-readonly-username)),
        password: ((github-readonly-password)),
      }
  - name: build-image
    type: registry-image
    check_every: 10m
    icon: docker
    source:
      repository: ((docker-base-image-host))/((docker-base-image-path))
      tag: ((docker-base-image-tag))

jobs:
  - name: ((application-name))-test
    public: false
    serial: true
    plan:
      - in_parallel:
          fail_fast: true
          steps:
            - get: build-image
            - get: src
              params: { depth: 1 }
              trigger: true
      - task: task-app-test
        timeout: 1h
        image: build-image
        config:
          platform: linux
          inputs: [{ name: src }]
          outputs: [{ name: artifacts }]
          params:
            application_name: ((application-name))
            build_env: ((build-env))
            build_type: ((web-build-type))
            branch: ((git-branch))
            pkg_version: ((pkg-version))
            product: ((product-name))
          run: { path: src/ci/tasks/test-python.sh }

  - name: ((application-name))-update-lambda-code
    plan:
      - get: src
        params: { depth: 1 }
        trigger: true
      - get: build-image
      - task: get-aws-api-keys
        image: build-image
        config:
          platform: linux
          run: { path: src/ci/tasks/get-aws-keys.sh }
          inputs: [{ name: src }]
          outputs: [{ name: secrets }]
          params:
            vault_url: ((vault-url-cc))
            vault_token: ((vault-token-cc-rw))
            aws_account_id: ((aws-account-id))
      - task: lambda-deploy
        image: build-image
        config:
          platform: linux
          inputs: [{ name: src }, { name: secrets }]
          run: { path: src/ci/tasks/deploy-python.sh }
          params:
            region: ((aws-region))
            application_deploy_env: ((application-deploy-env))
            product_name: ((product-prefix))
            environment_suffix: ((environment-suffix))

  # update lambda layers
  - name: ((application-name))-layers-build-and-deploy
    serial: true
    plan:
      - get: src
        passed: [((application-name))-update-lambda-code]
        params: { depth: 1 }
        trigger: true
      - get: build-image
      - task: get-aws-api-keys
        image: build-image
        config:
          platform: linux
          run: { path: src/ci/tasks/get-aws-keys.sh }
          inputs: [{ name: src }]
          outputs: [{ name: secrets }]
          params:
            vault_url: ((vault-url-cc))
            vault_token: ((vault-token-cc-rw))
            aws_account_id: ((aws-account-id))
      - task: layers-build-and-deploy
        image: build-image
        config:
          platform: linux
          inputs: [{ name: src }, { name: secrets }]
          outputs: [{ name: layer_info }]
          run: { path: src/ci/tasks/deploy-layers.sh }
          params:
            region: ((aws-region))
            application_deploy_env: ((application-deploy-env))
            product_name: ((product-name))
            environment_suffix: ((environment-suffix))
      - task: update-lambda-layer-versions
        image: build-image
        config:
          platform: linux
          inputs: [{ name: src }, { name: secrets }, { name: layer_info }]
          run: { path: src/ci/tasks/update-lambda-layer-version.sh }
          params:
            region: ((aws-region))
            application_deploy_env: ((application-deploy-env))
            product_name: ((product-name))
            environment_suffix: ((environment-suffix))
